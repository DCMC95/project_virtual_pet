:root {
    /* Sets default values for the below variables */
    --flex: none;
    --pad: 1em;
    --rgap: 1em;
    --bcolor: red;
    --color: black;
    --start: translate(-100px, 520px) scale(1.5, 1.5);
    --finish: translate(820px, 520px) scale(1.5, 1.5);
}

body {
    /* Positions the UI elements */
    background-color: lightblue;
    padding: 0.5em;
    margin: 0%;
    display: grid;
    grid-template-columns: 25fr 3fr 5fr;
    grid-template-rows:  0fr 0fr auto;
    grid-template-areas: "pageTitle pageTitle pageTitle"
                         "petInfo petInfo localeStorage"
                         "statsTime statsTime localeStorage"
                         "main main main";
}

#pageTitle {
    padding: 0;
    grid-area: pageTitle;
    text-align: center;
}

.petInfo {
    grid-area: petInfo;
    text-align: center;
    margin: 0;
}

.statsTime {
    grid-area: statsTime;
    text-align: center;
    margin: 0;
}

.main {
    /* Positions the UI elements */
    grid-area: main;
    display: grid;
    grid-template-columns: 8fr min-content;
    grid-template-rows: auto auto;
    grid-template-areas: "pet statsMeters "
                         "statsButtons statsMeters ";
}

svg {
    /* Sets the properties of the SVG area */
    background-color: white;
    grid-area: pet;
    border: 0.01rem;
    border-style: solid;
    border-color: rgb(0, 0, 0);
}

.thinCat {
    /* Sets the width of the cat */
    transform: scale(0.92, 1);
}

.thinnigCat {
    /* Sets the width of the cat */
    transform: scale(0.995, 1);
}

.normalCat {
    /* Sets the width of the cat */
    transform: scale(1.07, 1);
}

.fatteningCat {
    /* Sets the width of the cat */
    transform: scale(1.145, 1);
}

.fatCat {
    /* Sets the width of the cat */
    transform: scale(1.22, 1);
}

.redHead {
    /* Sets the color of the cats head */
    fill: red;
}

.redEars {
    /* Sets the color of the cats ears */
    stroke: red;
    stroke-width: 5;
    fill: darkred;
}

.blueHead {
    /* Sets the color of the cats head */
    fill: blue;
}

.blueEars {
    /* Sets the color of the cats ears */
    stroke: blue;
    stroke-width: 5;
    fill: darkblue;
}

.greenHead {
    /* Sets the color of the cats head */
    fill: green;
}

.greenEars {
    /* Sets the color of the cats ears */
    stroke: green;
    stroke-width: 5;
    fill: darkgreen;
}

.statsMeters {
    grid-area: statsMeters;
    text-align: center;
}

.statsMeters p {
    margin: 0;
}

meter {
    border: 1em;
}

.localeStorageButtons {
    /* Sets the properties for the buttons area */
    grid-area: localeStorage;
    column-gap: 1rem;
    row-gap: 5rem;
}

.localeStorageButtons > button{
    /* Sets the properties of each of the buttons */
    width: 100%;
    background-color: white;
    color: black;
    border: none;
    padding: 1em;
}

.localeStorageButtons > button:active {
    /* Makes buttons flash yellow when pressed */
    background-color: black;
    color: white;
}

.statsButtons {
    /* Sets the properties for the buttons area */
    grid-area: statsButtons;
    text-align: center;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    column-gap: 1rem;
    row-gap: var(--rgap);
    flex-wrap: var(--flex);
}

.statsButtons > button {
    /* Sets the properties of each of the buttons */
    width: 100%;
    background-color: blue;
    color: white;
    border: none;
    padding: var(--pad);
    border-radius: 5em;
}

@media screen and (max-width: 600px) {
    /* Changes the variable below, if the screen is less than 601 px */
    :root {
        --flex: wrap;
        --rgap: 1em;
        --pad: 1.55em;
        --bcolor: blue;
        --color: white;
        --start: translate(-300px, 290px) scale(5, 5);
        --finish: translate(625px, 290px) scale(5, 5);
    }
}

.statsButtons > button:hover {
    /* Makes buttons turn red when hovered over */
    background-color: var(--bcolor);
    color: var(--color);
}

.statsButtons > button:active {
    /* Makes buttons flash yellow when pressed */
    background-color: yellow;
    color: black;
}

.hide {
    display: none;
}

.display {
    /* Sets the display properties */
    display: flex;
    column-gap: 2rem;
    width: 50px;
    justify-content: space-between;
}

.enemy {
    /* Sets the scale of the enemy */
    transform: var(--start);
}

.newEnemyPosition {
    /* Sets a new position */
    transform: var(--finish);   
}

@keyframes slider {
    /* Creates an animation that causes an element to slide from and to a destination */
    0% { transform: var(--start); }
    100% { transform: var(--finish); }
}

@keyframes warn {
    /* Creates an animation that cause red to pulse */
    50% {
      opacity: 0.5;
      background-color: red;
    }
}

.slider {
    /* Sets the duration of an animation and if it repeats */
    animation: slider 3.5s linear;
}

.warn {
    /* Sets the duration of an animation and if it repeats */
    animation: warn 0.75s infinite;
}

.whiteLightDark {
    /* Sets the color to a white gradient */
    fill: url('#whiteLightDark');
}

.redLightDark {
    /* Sets the color to a red gradient */
    fill: url('#redLightDark');
}

.greenLightDark {
    /* Sets the color to a green gradient */
    fill: url('#greenLightDark');
}

.blueLightDark {
    /* Sets the color to a blue gradient */
    fill: url('#blueLightDark');
}

.orangeLightDark {
    /* Sets the color to a orange gradient */
    fill: url('#orangeLightDark');
}

.purpleLightDark {
    /* Sets the color to a purple gradient */
    fill: url('#purpleLightDark');
}
